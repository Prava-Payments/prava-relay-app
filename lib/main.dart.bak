import 'package:flutter/material.dart';
import 'package:readsms/readsms.dart';
import 'dart:async';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';  // Import for JSON encoding
import 'package:background_sms/background_sms.dart';

void main() {
  runApp(MaterialApp(home: Home()));
}

class Home extends StatefulWidget {
  @override
  _Home createState() => _Home();
}

class _Home extends State<Home> {
  final _plugin = Readsms();
  List<SmsData> smsList = [];

  @override
  void initState() {
    super.initState();
    getPermission().then((value) {
      if (value) {
        _plugin.read();
        _plugin.smsStream.listen((event) {
          setState(() {
            SmsData smsData = SmsData(
              body: event.body,
              sender: event.sender,
              timeReceived: event.timeReceived,
            );
            smsList.insert(0, smsData); // Insert new SmsData at the beginning

            // Check for specific content and send API request
            print(smsData.body);
            if (smsData.body.contains("Sarva, from: client, to: relay, public_address")) {
              print("-----------trying to reach server-----------------");
              final address = extractPublicAddress(smsData.body);
              if (address != null) {
                sendPostRequest(address, smsData.sender);
              } else {
                print("No public address found in the SMS content.");
              }
            }
          });
        });
      }
    });
  }

  String? extractPublicAddress(String messageContent) {
    // Regular expression to extract the public address
    final regex = RegExp(r'public_address:\s*(0x[a-fA-F0-9]{40})');
    final match = regex.firstMatch(messageContent);
    if (match != null && match.groupCount > 0) {
      return match.group(1);
    }
    return null;
  }

  Future<void> sendPostRequest(String address, String sender) async {
    final url = 'https://sarva-backend-production.up.railway.app/api/send';
    try {
      final response = await http.post(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'}, // Set the content type to JSON
        body: jsonEncode({'address': address}), // Encode the payload as JSON
      );
      if (response.statusCode == 200) {
        print("----------------Message sent successfully-------------------");
        print("Response body: ${response.body}");
        final responseBody = jsonDecode(response.body);
        final balanceETH = responseBody['balance']['ETH'];
        final balanceUSDC = responseBody['balance']['USDC'];
        final nonce = responseBody['nonce'];
        sendSMS(sender, balanceETH, balanceUSDC, nonce);
      } else {
        print("Failed to send message: ${response.statusCode}");
        print("Response body: ${response.body}");
      }
    } catch (e) {
      print("Error sending message: $e");
    }
  }

  Future<void> sendSMS(String sender, String balanceETH, String balanceUSDC, int nonce) async {
    final smsContent = "Sarva, from: relay, to: client, balance: ETH: $balanceETH, USDC: $balanceUSDC, nonce: $nonce";
    try {
      final result = await BackgroundSms.sendMessage(
        phoneNumber: sender,
        message: smsContent,
        simSlot: 1,
      );
      if (result == SmsStatus.sent) {
        print("SMS sent successfully to $sender");
      } else {
        print("Failed to send SMS to $sender: $result");
      }
    } catch (e) {
      print("Error sending SMS: $e");
    }
  }

  Future<bool> getPermission() async {
    if (await Permission.sms.status == PermissionStatus.granted) {
      return true;
    } else {
      if (await Permission.sms.request() == PermissionStatus.granted) {
        return true;
      } else {
        print("permission denied");
        return false;
      }
    }
  }

  @override
  void dispose() {
    super.dispose();
    _plugin.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('SMS Reader App'),
        ),
        body: ListView.builder(
          itemCount: smsList.length,
          itemBuilder: (context, index) {
            return Card(
              child: ListTile(
                title: Text('Sender: ${smsList[index].sender}'),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('SMS: ${smsList[index].body}'),
                    Text('Time: ${smsList[index].timeReceived.toString()}'),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

class SmsData {
  final String body;
  final String sender;
  final DateTime timeReceived;

  SmsData({required this.body, required this.sender, required this.timeReceived});
}

